package com.haoeyou.user.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.graphics.Rect;
import android.os.Bundle;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.haoeyou.user.R;
import com.haoeyou.user.adapter.GridImageAdapter;
import com.haoeyou.user.base.BaseActivity;
import com.haoeyou.user.common.Common;
import com.haoeyou.user.event.ItemListener;
import com.haoeyou.user.mvp.presenter.BasePresenter;
import com.luck.picture.lib.compress.Luban;
import com.luck.picture.lib.model.FunctionConfig;
import com.luck.picture.lib.model.FunctionOptions;
import com.luck.picture.lib.model.PictureConfig;
import com.yalantis.ucrop.entity.LocalMedia;

import java.util.ArrayList;
import java.util.List;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * 类名: {@link AddRecordActivity}
 * <br/> 功能描述:添加病历
 * <br/> 作者: MouTao
 * <br/> 时间: 2017/5/25
 */
public class AddRecordActivity extends BaseActivity implements ItemListener<LocalMedia> {
    @Bind(R.id.title_back)
    ImageView mTitleBack;
    @Bind(R.id.title_tv)
    TextView mTitleTv;
    @Bind(R.id.more)
    TextView mMore;
    @Bind(R.id.toolbar_layout)
    RelativeLayout mToolbarLayout;
    @Bind(R.id.pic_list)
    RecyclerView mPicList;
    @Bind(R.id.message)
    EditText mMessage;
    private Context mContext;
    public static final String TAG = "AddRecordActivity";
    private GridImageAdapter adapter;

    @Override
    protected int getLayoutId() {
        return R.layout.activity_add_record;
    }

    @Override
    protected void initInjector() {
        mContext = this;
        ButterKnife.bind(this);
        initRecycleView();
    }

    @Override
    protected void initEventAndData() {
        mMore.setText("完成");
        mTitleTv.setText("添加病历");
        mMore.setTextColor(Color.parseColor("#F1F1F1"));
        mMore.setClickable(false);
        //        final Drawable drawable = getResources().getDrawable(R.drawable.icon_insert);
        //        // 这一步必须要做,否则不会显示.
        //        drawable.setBounds(0, 0, drawable.getMinimumWidth(), drawable.getMinimumHeight());

        mMessage.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (count != 0) {
                    //                    mMessage.setCompoundDrawables(null, null, null, null);
                }
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (TextUtils.isEmpty(s)) {
                    //                    mMessage.setCompoundDrawables(drawable, null, null, null);
                    mMore.setTextColor(Color.parseColor("#F1F1F1"));
                    mMore.setClickable(false);
                } else {
                    mMore.setTextColor(Color.parseColor("#3eb0ff"));
                    mMore.setClickable(true);
                }
            }
        });
    }

    @Override
    public BasePresenter getPresenter() {
        return null;
    }


    @OnClick({R.id.title_back, R.id.more})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.title_back:
                finish();
                break;
            case R.id.more:
                break;
        }
    }


    private List<LocalMedia> selectMedia = new ArrayList<LocalMedia>();
    private PictureConfig.OnSelectResultCallback resultCallback = new PictureConfig.OnSelectResultCallback() {
        @Override
        public void onSelectSuccess(List<LocalMedia> resultList) {
            // 多选回调
            selectMedia = resultList;
            Log.i("callBack_result", selectMedia.size() + "");
            LocalMedia media = resultList.get(0);
            if (media.isCut() && !media.isCompressed()) {
                // 裁剪过
                String path = media.getCutPath();
            } else if (media.isCompressed() || (media.isCut() && media.isCompressed())) {
                // 压缩过,或者裁剪同时压缩过,以最终压缩过图片为准
                String path = media.getCompressPath();
            } else {
                // 原图地址
                String path = media.getPath();
            }
            if (selectMedia != null) {
                adapter.setList(selectMedia);
                adapter.notifyDataSetChanged();
            }
        }

        @Override
        public void onSelectSuccess(LocalMedia media) {
            // 单选回调
            selectMedia.add(media);
            if (selectMedia != null) {
                adapter.setList(selectMedia);
                adapter.notifyDataSetChanged();
            }
        }
    };

    public void initRecycleView() {
        GridLayoutManager mgr = new GridLayoutManager(mContext, 4);
        mPicList.setLayoutManager(mgr);
        mPicList.addItemDecoration(new RecyclerView.ItemDecoration() {
            @Override
            public void getItemOffsets(Rect outRect, int itemPosition, RecyclerView parent) {
                outRect.set(10, 10, 10, 20);
            }
        });

        adapter = new GridImageAdapter(AddRecordActivity.this, onAddPicClickListener);
        adapter.setList(selectMedia);
        adapter.setSelectMax(10);
        mPicList.setAdapter(adapter);

        adapter.setOnItemClickListener(new GridImageAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(int position, View v) {
                // 预览图片 可长按保存 也可自定义保存路径
                //PictureConfig.getInstance().externalPicturePreview(MainActivity.this, "/custom_file", position, 
                // selectMedia);
                PictureConfig.getInstance().externalPicturePreview(AddRecordActivity.this, position, selectMedia);

            }
        });

    }

    /**
     * 删除图片回调接口
     */

    private GridImageAdapter.onAddPicClickListener onAddPicClickListener = new GridImageAdapter.onAddPicClickListener
            () {
        @Override
        public void onAddPicClick(int type, int position) {
            switch (type) {
                case 0:
                    // 进入相册
                    /**
                     * type --> 1图片 or 2视频
                     * copyMode -->裁剪比例，默认、1:1、3:4、3:2、16:9
                     * maxSelectNum --> 可选择图片的数量
                     * selectMode         --> 单选 or 多选
                     * isShow       --> 是否显示拍照选项 这里自动根据type 启动拍照或录视频
                     * isPreview    --> 是否打开预览选项
                     * isCrop       --> 是否打开剪切选项
                     * isPreviewVideo -->是否预览视频(播放) mode or 多选有效
                     * ThemeStyle -->主题颜色
                     * CheckedBoxDrawable -->图片勾选样式
                     * cropW-->裁剪宽度 值不能小于100  如果值大于图片原始宽高 将返回原图大小
                     * cropH-->裁剪高度 值不能小于100
                     * isCompress -->是否压缩图片
                     * setEnablePixelCompress 是否启用像素压缩
                     * setEnableQualityCompress 是否启用质量压缩
                     * setRecordVideoSecond 录视频的秒数，默认不限制
                     * setRecordVideoDefinition 视频清晰度  Constants.HIGH 清晰  Constants.ORDINARY 低质量
                     * setImageSpanCount -->每行显示个数
                     * setCheckNumMode 是否显示QQ选择风格(带数字效果)
                     * setPreviewColor 预览文字颜色
                     * setCompleteColor 完成文字颜色
                     * setPreviewBottomBgColor 预览界面底部背景色
                     * setBottomBgColor 选择图片页面底部背景色
                     * setCompressQuality 设置裁剪质量，默认无损裁剪
                     * setSelectMedia 已选择的图片
                     * setCompressFlag 1为系统自带压缩  2为第三方luban压缩
                     * 注意-->type为2时 设置isPreview or isCrop 无效
                     * 注意：Options可以为空，默认标准模式
                     */
                    //                    String ws = et_w.getText().toString().trim();
                    //                    String hs = et_h.getText().toString().trim();
                    //                    String b = et_kb.getText().toString().trim();// 压缩最大大小 单位是b
                    //
                    //                    if (!isNull(ws) && !isNull(hs)) {
                    //                        cropW = Integer.parseInt(ws);
                    //                        cropH = Integer.parseInt(hs);
                    //                    }

                    //                    if (!isNull(b)) {
                    //                        maxB = Integer.parseInt(b);
                    //                    }

                    //                    if (!isNull(et_compress_width.getText().toString()) && !isNull
                    // (et_compress_height.getText()
                    //                            .toString())) {
                    //                        compressW = Integer.parseInt(et_compress_width.getText().toString());
                    //                        compressH = Integer.parseInt(et_compress_height.getText().toString());
                    //                    }
                    //
                    //                    if (theme) {
                    //                        // 设置主题样式
                    //                        themeStyle = ContextCompat.getColor(AddRecordActivity.this, R.color.blue);
                    //                    } else {
                    //                        themeStyle = ContextCompat.getColor(AddRecordActivity.this, R.color
                    // .bar_grey);
                    //                    }
                    //
                    //                    if (selectImageType) {
                    //                        checkedBoxDrawable = R.drawable.select_cb;
                    //                    } else {
                    //                        checkedBoxDrawable = 0;
                    //                    }
                    //
                    //                    if (isCheckNumMode) {
                    //                        // QQ 风格模式下 这里自己搭配颜色
                    //                        previewColor = ContextCompat.getColor(AddRecordActivity.this, R.color
                    // .blue);
                    //                        completeColor = ContextCompat.getColor(AddRecordActivity.this, R.color
                    // .blue);
                    //                    } else {
                    //                        previewColor = ContextCompat.getColor(AddRecordActivity.this, R.color
                    // .tab_color_true);
                    //                        completeColor = ContextCompat.getColor(AddRecordActivity.this, R.color
                    // .tab_color_true);
                    //                    }

                    FunctionOptions options = new FunctionOptions.Builder().setType(1) // 图片or视频 
                            // FunctionConfig.TYPE_IMAGE  TYPE_VIDEO
                            //                            .setCropMode(copyMode) // 裁剪模式 默认、1:1、3:4、3:2、16:9
                            //                            .setOffsetX() // 自定义裁剪比例
                            //                            .setOffsetY() // 自定义裁剪比例
                            .setCompress(true) //是否压缩
                            .setEnablePixelCompress(true) //是否启用像素压缩
                            .setEnableQualityCompress(true) //是否启质量压缩
                            .setMaxSelectNum(10) // 可选择图片的数量
                            .setMinSelectNum(0)// 图片或视频最低选择数量，默认代表无限制
                            .setSelectMode(FunctionConfig.MODE_MULTIPLE) // 单选 or 多选 FunctionConfig.MODE_SINGLE 
                            // FunctionConfig
                            .setShowCamera(true) //是否显示拍照选项 这里自动根据type 启动拍照或录视频
                            .setEnablePreview(true) // 是否打开预览选项
                            .setEnableCrop(false) // 是否打开剪切选项
                            .setCircularCut(false)// 是否采用圆形裁剪
                            //                            .setPreviewVideo(isPreviewVideo) // 是否预览视频(播放) mode or 多选有效
                            //                            .setCheckedBoxDrawable(checkedBoxDrawable)
                            // .setRecordVideoDefinition(FunctionConfig.HIGH)
                            // 视频清晰度
                            .setRecordVideoSecond(60) // 视频秒数
                            .setCustomQQ_theme(0)// 可自定义QQ数字风格，不传就默认是蓝色风格
                            .setGif(false)// 是否显示gif图片，默认不显示
                            //                            .setCropW(cropW) // cropW-->裁剪宽度 值不能小于100  如果值大于图片原始宽高 将返回原图大小
                            //                            .setCropH(cropH) // cropH-->裁剪高度 值不能小于100 如果值大于图片原始宽高 将返回原图大小
                            .setMaxB(202400) // 压缩最大值 例如:200kb  就设置202400，202400 / 1024 = 200kb
                            //                            .setPreviewColor(previewColor) //预览字体颜色
                            //                            .setCompleteColor(completeColor) //已完成字体颜色
                            //                            .setPreviewBottomBgColor(previewBottomBgColor) //预览图片底部背景色
                            //                            .setPreviewTopBgColor(previewTopBgColor)//预览图片标题背景色
                            //                            .setBottomBgColor(bottomBgColor) //图片列表底部背景色
                            .setGrade(Luban.THIRD_GEAR) // 压缩档次 默认三档
                            //                            .setCheckNumMode(isCheckNumMode).setCompressQuality(100) //
                            // 图片裁剪质量,默认无损
                            .setImageSpanCount(4) // 每行个数
                            .setVideoS(0)// 查询多少秒内的视频 单位:秒
                            .setSelectMedia(selectMedia) // 已选图片，传入在次进去可选中，不能传入网络图片
                            .setCompressFlag(1) // 1 系统自带压缩 2 luban压缩
                            //                            .setCompressW(compressW) // 压缩宽 如果值大于图片原始宽高无效
                            //                            .setCompressH(compressH) // 压缩高 如果值大于图片原始宽高无效
                            //                            .setThemeStyle(themeStyle) // 设置主题样式
                            .setNumComplete(false) // 0/9 完成  样式
                            .setClickVideo(false)// 点击声音
                            .setFreeStyleCrop(false) // 裁剪是移动矩形框或是图片
                            //                            .setRotateEnabled(false) // 裁剪时是否旋转图片
                            //                            .setScaleEnabled(false)// 裁剪时是否放大小图片
                            //                            .setPicture_title_color(ContextCompat
                            //                            .getColor(AddRecordActivity.this, R.color.black)) // 设置标题字体颜色
                            //                            .setPicture_right_color(ContextCompat.getColor
                            // (AddRecordActivity
                            // .this, R.color.black)) // 设置标题右边字体颜色
                            //                            .setLeftBackDrawable(R.mipmap.back2) // 设置返回键图标
                            //                            .setStatusBar(ContextCompat.getColor(AddRecordActivity.this, R
                            // .color.white)) // 设置状态栏颜色，默认是和标题栏一致
                            //                            .setImmersive(false)// 是否改变状态栏字体颜色(黑色)
                            .create();

                    //                    if (mode) {
                    //                        // 只拍照
                    //                        PictureConfig.getInstance().init(options).startOpenCamera
                    // (AddRecordActivity.this);
                    //                    } else {
                    // 先初始化参数配置，在启动相册
                    PictureConfig.getInstance().init(options).openPhoto(AddRecordActivity.this, resultCallback);
                    //                    }
                    break;
                case 1:
                    // 删除图片
                    selectMedia.remove(position);
                    adapter.notifyItemRemoved(position);
                    break;
            }
        }
    };

    @Override
    public void onItemClick(View view, int position, LocalMedia mData) {

    }

    /**
     * @param ct   上下文
     * @param from 从哪儿跳来的
     */
    public static void startAction(Context ct, String from) {
        Intent itt = new Intent(ct, AddRecordActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        itt.putExtras(bundle);
        ct.startActivity(itt);
    }
}
