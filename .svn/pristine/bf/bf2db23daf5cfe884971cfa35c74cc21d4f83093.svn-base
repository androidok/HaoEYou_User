package com.haoeyou.user.activity;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.donkingliang.groupedadapter.adapter.GroupedRecyclerViewAdapter;
import com.donkingliang.groupedadapter.holder.BaseViewHolder;
import com.google.gson.Gson;
import com.haoeyou.user.R;
import com.haoeyou.user.adapter.BaseRecyclerAdapter;
import com.haoeyou.user.adapter.ExpandableAdapter;
import com.haoeyou.user.adapter.FilterHolder;
import com.haoeyou.user.adapter.InfoListHolder;
import com.haoeyou.user.base.BaseActivity;
import com.haoeyou.user.bean.CategoryRequestBean;
import com.haoeyou.user.bean.CategoryResponseBean;
import com.haoeyou.user.common.Common;
import com.haoeyou.user.entity.ExpandableGroupEntity;
import com.haoeyou.user.event.ItemListener;
import com.haoeyou.user.mvp.model.GroupModel;
import com.haoeyou.user.mvp.presenter.BasePresenter;
import com.haoeyou.user.mvp.presenter.CareDepartmentPresenter;
import com.haoeyou.user.mvp.view.CareDepartmentView;
import com.haoeyou.user.widget.smoothcheck.SmoothCheckBox;

import java.util.ArrayList;
import java.util.HashMap;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

import static android.R.id.list;

public class CareDepartmentActivity extends BaseActivity implements CareDepartmentView {
    @Bind(R.id.filter_recycle)
    RecyclerView mFilterRecycle;
    @Bind(R.id.nothing)
    View mNothing;
    @Bind(R.id.filter_layout)
    LinearLayout mFilterLayout;
    private Context mContext;

    @Bind(R.id.title_back)
    ImageView mTitleBack;
    @Bind(R.id.title_tv)
    TextView mTitleTv;
    @Bind(R.id.more)
    TextView mMore;
    @Bind(R.id.toolbar_layout)
    RelativeLayout mToolbarLayout;
    @Bind(R.id.infor_recycle)
    RecyclerView mInfoRecycle;
    @Bind(R.id.filter)
    EditText mFilter;
    private ExpandableAdapter adapter;
    ArrayList<ExpandableGroupEntity> GroupList = new ArrayList<ExpandableGroupEntity>();
    ArrayList<CategoryResponseBean> FilterList = new ArrayList<CategoryResponseBean>();
    private BaseRecyclerAdapter mFilterAdapter;
    private HashMap<String, String> checkMap = new HashMap<>();

    @Override
    protected int getLayoutId() {
        return R.layout.activity_care_department;
    }

    @Override
    protected void initInjector() {
        mContext = this;
    }

    @Override
    protected void initEventAndData() {
        mTitleTv.setText("关注科室");
        mMore.setText("完成");
        initRecycleView();
        initFilterRecyclerView();
        String jsonBean = new Gson().toJson(new CategoryRequestBean(Common.TOKEN, ""));
        ((CareDepartmentPresenter) mPresenter).getCategoryList(mContext, jsonBean);
        initEditText();
    }


    @Override
    public BasePresenter getPresenter() {
        return new CareDepartmentPresenter();
    }

    @OnClick({R.id.title_back, R.id.more, R.id.nothing})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.title_back:
                finish();
                break;
            case R.id.more:
                StringBuffer item = new StringBuffer();
                for (String key : checkMap.keySet()) {
                    item.append(checkMap.get(key).toString() + ",");
                }
                backToFillingActivity(1, item.toString());
                break;
            case R.id.nothing:
                mFilterLayout.setVisibility(View.INVISIBLE);
                break;
        }
    }

    private void initEditText() {
        mFilter.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                mFilterLayout.setVisibility(View.VISIBLE);
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                if (count == 0)
                    return;
                String jsonBean = new Gson().toJson(new CategoryRequestBean(Common.TOKEN, mFilter.getText().toString
                        ()));
                ((CareDepartmentPresenter) mPresenter).getFilterCategoryList(mContext, jsonBean);
            }

            @Override
            public void afterTextChanged(Editable s) {

            }
        });

    }

    private void initRecycleView() {
        mInfoRecycle.setLayoutManager(new GridLayoutManager(this, 6));
        mInfoRecycle.setItemAnimator(new DefaultItemAnimator());
        mInfoRecycle.setLayoutManager(new LinearLayoutManager(this));
        setGroupAdapter();
    }

    private void initFilterRecyclerView() {
        mFilterRecycle.setLayoutManager(new GridLayoutManager(this, 6));
        mFilterRecycle.setItemAnimator(new DefaultItemAnimator());
        mFilterRecycle.setLayoutManager(new LinearLayoutManager(this));
        setFilterAdapter();
    }


    private void setGroupAdapter() {
        if (mInfoRecycle == null)
            return;
        if (adapter == null) {
            adapter = new ExpandableAdapter(this, GroupList);
        }

        adapter.setOnHeaderClickListener(new GroupedRecyclerViewAdapter.OnHeaderClickListener() {
            @Override
            public void onHeaderClick(GroupedRecyclerViewAdapter adapter, BaseViewHolder holder, int groupPosition) {

                if (groupPosition == 0) {
                    ExpandableAdapter expandableAdapter = (ExpandableAdapter) adapter;
                    if (expandableAdapter.isExpand(groupPosition)) {
                        expandableAdapter.collapseGroup(groupPosition);
                    } else {
                        expandableAdapter.expandGroup(groupPosition);
                    }
                } else {
                    SmoothCheckBox mCheck = holder.get(R.id.checkbox);
                    boolean isCheck = mCheck.isChecked();
                    if (!isCheck) {
                        checkMap.put(GroupList.get(groupPosition).getHeader(), GroupList.get(groupPosition).getHeader
                                ());
                    } else {
                        checkMap.remove(GroupList.get(groupPosition).getHeader());
                    }
                    mCheck.setChecked(!isCheck);
                }
            }
        });
        adapter.setOnChildClickListener(new GroupedRecyclerViewAdapter.OnChildClickListener() {
            @Override
            public void onChildClick(GroupedRecyclerViewAdapter adapter, BaseViewHolder holder, int groupPosition, 
                                     int childPosition) {
                Toast.makeText(mContext, "子项：groupPosition = " + groupPosition + ", childPosition = " + 
                        childPosition, Toast.LENGTH_LONG).show();
                SmoothCheckBox mCheck = holder.get(R.id.child_box);

                boolean isCheck = mCheck.isChecked();
                mCheck.setChecked(!isCheck);
                if (!isCheck) {
                    checkMap.put(GroupList.get(groupPosition).getChildren().get(childPosition).getChild(), GroupList.get
                            (groupPosition)
                            .getHeader
                            ());
                } else {
                    checkMap.remove(GroupList.get(groupPosition).getHeader());
                }
            }
        });
        mInfoRecycle.setAdapter(adapter);
    }

    private void setFilterAdapter() {
        if (mFilterRecycle == null)
            return;
        if (mFilterAdapter == null) {
            mFilterAdapter = new BaseRecyclerAdapter(FilterList, R.layout.adapter_expandable_header, FilterHolder
                    .class, new ItemListener<CategoryResponseBean>() {
                @Override
                public void onItemClick(View view, int position, CategoryResponseBean mData) {

                }
            });
            mFilterRecycle.setAdapter(mFilterAdapter);
        } else {
            if ((mFilterAdapter.getItem(0) == null) && (FilterList.size() == 0))
                return;
            if ((mFilterAdapter.getItem(0) == null) || (FilterList.size() == 0))
                mFilterAdapter.setmDatas(FilterList);
        }
    }

    /**
     * @param ct   上下文
     * @param from 从哪儿跳来的
     */
    public static void startAction(Context ct, String from) {
        Intent itt = new Intent(ct, FillingActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        itt.putExtras(bundle);
        ct.startActivity(itt);
    }

    @Override
    public void showLoadProgressDialog(String str) {

    }

    @Override
    public void disDialog() {

    }


    private void backToFillingActivity(int resultCode, String info) {
        Intent itt = new Intent();
        Bundle bundle = new Bundle();
        bundle.putString("DEPART", info);
        itt.putExtras(bundle);
        setResult(resultCode, itt);
        finish();
    }

    @Override
    public void getCategoryListSucceed(CategoryResponseBean bean) {
        GroupList = GroupModel.getExpandableGroups(bean);
        adapter.changeContent(GroupList);
    }

    @Override
    public void getCategoryListFailed(String message) {

    }

    @Override
    public void getFilterCategoryListSucceed(CategoryResponseBean bean) {

    }

    @Override
    public void getFilterCategoryListFailed(String message) {

    }
}
