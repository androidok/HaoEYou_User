package com.haoeyou.user.activity;

import android.content.Context;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.bigkoo.pickerview.OptionsPickerView;
import com.bigkoo.pickerview.TimePickerView;
import com.bigkoo.pickerview.listener.CustomListener;
import com.google.gson.Gson;
import com.haoeyou.user.R;
import com.haoeyou.user.base.BaseActivity;
import com.haoeyou.user.bean.CardBean;
import com.haoeyou.user.bean.JsonBean;
import com.haoeyou.user.common.Common;
import com.haoeyou.user.mvp.presenter.BasePresenter;
import com.haoeyou.user.prasejson.CityParse;
import com.haoeyou.user.utils.DataUtils;
import com.haoeyou.user.utils.GetJsonDataUtil;

import org.json.JSONArray;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import butterknife.Bind;
import butterknife.ButterKnife;
import butterknife.OnClick;

/**
 * 类名: {@link FillingActivity}
 * <br/> 功能描述:资料填写引导页面
 * <br/> 作者: MouTao
 * <br/> 时间: 2017/5/24
 */
public class FillingActivity extends BaseActivity {


    @Bind(R.id.title_back)
    ImageView mTitleBack;
    @Bind(R.id.title_tv)
    TextView mTitleTv;
    @Bind(R.id.more)
    TextView mMore;
    @Bind(R.id.toolbar_layout)
    RelativeLayout mToolbarLayout;
    @Bind(R.id.name)
    EditText mName;
    @Bind(R.id.birthday)
    TextView mBirthday;
    @Bind(R.id.tel)
    EditText mTel;
    @Bind(R.id.area)
    TextView mArea;
    @Bind(R.id.department)
    EditText mDepartment;
    @Bind(R.id.is_exercise)
    TextView mIsExercise;
    @Bind(R.id.is_smoking)
    TextView mIsSmoking;
    @Bind(R.id.is_drinking)
    TextView mIsDrinking;
    @Bind(R.id.sex)
    TextView mSex;
    @Bind(R.id.genetic_history)
    TextView mGeneticHistory;
    @Bind(R.id.allergy)
    TextView mAllergy;
    @Bind(R.id.normal_btn)
    Button mNormalBtn;
    @Bind(R.id.button_layout)
    LinearLayout mButtonLayout;

    private OptionsPickerView pvCustomOptions;
    private ArrayList<CardBean> cardItem = new ArrayList<>();
    private ArrayList<JsonBean> options1Items = new ArrayList<>();
    private ArrayList<CardBean> sexItems = new ArrayList<>();
    private ArrayList<CardBean> yesOrNoItems = new ArrayList<>();
    private ArrayList<ArrayList<String>> options2Items = new ArrayList<>();
    private ArrayList<ArrayList<ArrayList<String>>> options3Items = new ArrayList<>();
    private Context mContext;
    private int Flag;
    public static final String TAG = "FillingActivity";
    private TimePickerView pvTime, pvCustomTime;

    @Override
    protected int getLayoutId() {
        return R.layout.activity_filling;
    }

    @Override
    protected void initInjector() {
        mContext = this;
        onTintStatusBar();
        mHandler.sendEmptyMessage(0x0001);
    }

    @Override
    protected void initEventAndData() {
        mTitleTv.setText("就诊人健康资料");
        mMore.setText("跳过");
        mNormalBtn.setText("完成");
        sexItems.add(new CardBean(0, "男"));
        sexItems.add(new CardBean(1, "女"));
        yesOrNoItems.add(new CardBean(0, "是"));
        yesOrNoItems.add(new CardBean(1, "否"));

    }

    @Override
    public BasePresenter getPresenter() {
        return null;
    }


    @OnClick({R.id.title_back, R.id.more, R.id.birthday, R.id.area, R.id.department, R.id.is_exercise, R.id
            .is_smoking, R.id.is_drinking, R.id.genetic_history, R.id.allergy, R.id.normal_btn, R.id.sex})
    public void onViewClicked(View view) {
        switch (view.getId()) {
            case R.id.title_back:
                break;
            case R.id.more:
                /*跳转到MainActivity*/
                break;
            case R.id.birthday:
                selectBirthday();
                break;
            case R.id.sex:
                Flag = 1;
                ShowTwoPickerView(sexItems);
                break;
            case R.id.area:
                ShowPickerView();
                break;
            case R.id.department:
                gotoEditInfo(FillingActivity.TAG, "", 102, CareDepartmentActivity.class);
                break;
            case R.id.is_exercise:
                Flag = 2;
                ShowTwoPickerView(yesOrNoItems);
                break;
            case R.id.is_smoking:
                Flag = 3;
                ShowTwoPickerView(yesOrNoItems);
                break;
            case R.id.is_drinking:
                Flag = 4;
                ShowTwoPickerView(yesOrNoItems);
                break;
            case R.id.genetic_history:
                Intent itt2 = new Intent(FillingActivity.this, EditInfoActivity.class);
                gotoEditInfo(FillingActivity.TAG, mGeneticHistory.getText().toString(), 100, FillingActivity.class);
                break;
            case R.id.allergy:
                Intent itt3 = new Intent(FillingActivity.this, EditInfoActivity.class);
                gotoEditInfo(FillingActivity.TAG, mAllergy.getText().toString(), 101, FillingActivity.class);
                break;
            case R.id.normal_btn:
                break;
        }
    }


    private void selectBirthday() {
        /**
         * @description
         *
         * 注意事项：https://github.com/Bigkoo/Android-PickerView
         * 1.自定义布局中，id为 optionspicker 或者 timepicker 的布局以及其子控件必须要有，否则会报空指针.
         * 具体可参考demo 里面的两个自定义layout布局。
         * 2.因为系统Calendar的月份是从0-11的,所以如果是调用Calendar的set方法来设置时间,月份的范围也要是从0-11
         * setRangDate方法控制起始终止时间(如果不设置范围，则使用默认时间1900-2100年，此段代码可注释)
         */
        Calendar selectedDate = Calendar.getInstance();//系统当前时间
        Calendar startDate = Calendar.getInstance();
        startDate.set(2014, 1, 23);
        Calendar endDate = Calendar.getInstance();
        endDate.set(2027, 2, 28);
        //时间选择器 ，自定义布局
        pvCustomTime = new TimePickerView.Builder(this, new TimePickerView.OnTimeSelectListener() {
            @Override
            public void onTimeSelect(Date date, View v) {//选中事件回调
                mBirthday.setText(DataUtils.getTime(date));
                pvCustomTime.dismiss();
            }
        }).setDate(selectedDate).setRangDate(startDate, endDate).setLineSpacingMultiplier(3.6f).setContentSize(20)
                .setLayoutRes(R.layout.pickerview_custom_time, new CustomListener() {

            @Override
            public void customLayout(View v) {
                final TextView tvSubmit = (TextView) v.findViewById(R.id.tv_finish);
                ImageView ivCancel = (ImageView) v.findViewById(R.id.iv_cancel);
                tvSubmit.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        pvCustomTime.returnData();
                    }
                });
                ivCancel.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                    }
                });
            }
        }).setType(new boolean[]{true, true, true, false, false, false}).isCenterLabel(false).setLabel("", "", "", 
                        "", "", "")
                //是否只显示中间选中项的label文字，false则每项item全部都带有label。
                .setDividerColor(Color.RED).build();
        pvCustomTime.show();
    }


    private void ShowPickerView() {// 弹出选择器

        OptionsPickerView pvOptions = new OptionsPickerView.Builder(this, new OptionsPickerView
                .OnOptionsSelectListener() {
            @Override
            public void onOptionsSelect(int options1, int options2, int options3, View v) {
                //返回的分别是三个级别的选中位置
                String tx = options1Items.get(options1).getPickerViewText() + options2Items.get(options1).get
                        (options2) + options3Items.get(options1).get(options2).get(options3);
                mArea.setText(tx);
            }
        })

                .setTitleText("城市选择").setDividerColor(Color.BLACK).setTextColorCenter(Color.BLACK) //设置选中项文字颜色
                .setContentTextSize(20).setOutSideCancelable(false)// default is true
                .build();

        //        pvOptions.setPicker(options1Items);//一级选择器
        //        pvOptions.setPicker(options1Items, options2Items);//二级选择器*/
        pvOptions.setPicker(options1Items, options2Items, options3Items);//三级选择器
        pvOptions.show();
    }

    private void ShowTwoPickerView(ArrayList<CardBean> Items) {// 弹出选择器

        OptionsPickerView pvOptions = new OptionsPickerView.Builder(this, new OptionsPickerView
                .OnOptionsSelectListener() {
            @Override
            public void onOptionsSelect(int options1, int options2, int options3, View v) {
                switch (Flag) {
                    case 1:
                        mSex.setText(sexItems.get(options1).getCardNo());
                        break;
                    case 2:
                        mIsExercise.setText(yesOrNoItems.get(options1).getCardNo());
                        break;
                    case 3:
                        mIsSmoking.setText(yesOrNoItems.get(options1).getCardNo());
                        break;
                    case 4:
                        mIsDrinking.setText(yesOrNoItems.get(options1).getCardNo());
                        break;
                }
            }
        })

                .setTitleText("").setContentTextSize(20).isDialog(false).setDividerColor(Color.GRAY).setCancelText
                        ("").setDividerColor(Color.GRAY).setTextColorCenter(Color.BLACK) //设置选中项文字颜色
                .setContentTextSize(20).setOutSideCancelable(false)// default is true
                .build();

        pvOptions.setPicker(Items);//一级选择器
        pvOptions.show();
    }


    private Handler mHandler = new Handler() {
        public void handleMessage(Message msg) {
            switch (msg.what) {
                case 0x0001:
                    if (thread == null) {//如果已创建就不再重新创建子线程了
                        thread = new Thread(new Runnable() {
                            @Override
                            public void run() {
                                // 写子线程中的操作,解析省市区数据
                                initJsonData();
                            }
                        });
                        thread.start();
                    }
                    break;

                case 0x0002:
                    isLoaded = true;
                    break;

                case 0x0003:
                    break;

            }
        }
    };

    private void initJsonData() {//解析数据

        /**
         * 注意：assets 目录下的Json文件仅供参考，实际使用可自行替换文件
         * 关键逻辑在于循环体
         *
         * */
        ArrayList<JsonBean> jsonBean = CityParse.parseData(new GetJsonDataUtil().getJson(this, "province.json"));
        //用Gson 转成实体

        /**
         * 添加省份数据
         *
         * 注意：如果是添加的JavaBean实体，则实体类需要实现 IPickerViewData 接口，
         * PickerView会通过getPickerViewText方法获取字符串显示出来。
         */
        options1Items = jsonBean;

        for (int i = 0; i < jsonBean.size(); i++) {//遍历省份
            ArrayList<String> CityList = new ArrayList<>();//该省的城市列表（第二级）
            ArrayList<ArrayList<String>> Province_AreaList = new ArrayList<>();//该省的所有地区列表（第三极）

            for (int c = 0; c < jsonBean.get(i).getCityList().size(); c++) {//遍历该省份的所有城市
                String CityName = jsonBean.get(i).getCityList().get(c).getName();
                CityList.add(CityName);//添加城市

                ArrayList<String> City_AreaList = new ArrayList<>();//该城市的所有地区列表

                //如果无地区数据，建议添加空字符串，防止数据为null 导致三个选项长度不匹配造成崩溃
                if (jsonBean.get(i).getCityList().get(c).getArea() == null || jsonBean.get(i).getCityList().get(c)
                        .getArea().size() == 0) {
                    City_AreaList.add("");
                } else {

                    for (int d = 0; d < jsonBean.get(i).getCityList().get(c).getArea().size(); d++) {//该城市对应地区所有数据
                        String AreaName = jsonBean.get(i).getCityList().get(c).getArea().get(d);

                        City_AreaList.add(AreaName);//添加该城市所有地区数据
                    }
                }
                Province_AreaList.add(City_AreaList);//添加该省所有地区数据
            }

            /**
             * 添加城市数据
             */
            options2Items.add(CityList);
            /**
             * 添加地区数据
             */
            options3Items.add(Province_AreaList);
        }

        mHandler.sendEmptyMessage(0x0002);

    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (1 == resultCode) {

            if (100 == requestCode) {
                mGeneticHistory.setText(data.getExtras().get("INFO").toString());
            } else if (101 == requestCode) {
                mAllergy.setText(data.getExtras().get("INFO").toString());
            }
        }
    }

    private Thread thread;
    private boolean isLoaded = false;


    private void gotoEditInfo(String from, String info, int requestCode, Class<?> cls) {
        Intent itt = new Intent(FillingActivity.this, cls);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        bundle.putString("PRE_INFO", info);
        itt.putExtras(bundle);
        startActivityForResult(itt, requestCode);
    }

    /**
     * @param ct   上下文
     * @param from 从哪儿跳来的
     */
    public static void startAction(Context ct, String from) {
        Intent itt = new Intent(ct, FillingActivity.class);
        Bundle bundle = new Bundle();
        bundle.putString(Common.FROM, from);
        itt.putExtras(bundle);
        ct.startActivity(itt);
    }

}
